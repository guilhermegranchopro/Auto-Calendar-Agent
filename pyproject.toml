[project]
name = "ey-ai-deadline-manager"
version = "1.0.0"
description = "EY AI Challenge - Auto Calendar Deadline Manager Agent for Portuguese Tax Professionals"
authors = [
    {name = "Guilherme Grancho", email = "guilherme@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
keywords = ["ai", "tax", "deadlines", "portugal", "ey", "streamlit"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Financial and Insurance Industry",
    "Topic :: Office/Business :: Financial :: Accounting",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "streamlit>=1.28.1",
    "pandas>=2.1.1",
    "plotly>=5.17.0",
    "pillow>=10.0.1",
    "pypdf2>=3.0.1",
    "python-dateutil>=2.8.2",
    "holidays>=0.34",
    "google-generativeai>=0.3.1",
    "pathlib2>=2.3.7",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "ruff>=0.11.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

[project.urls]
"Homepage" = "https://github.com/guilhermegrancho/ey-ai-deadline-manager"
"Bug Tracker" = "https://github.com/guilhermegrancho/ey-ai-deadline-manager/issues"
"Repository" = "https://github.com/guilhermegrancho/ey-ai-deadline-manager.git"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/ey_deadline_manager"]

[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "ruff>=0.11.11",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

# Ruff configuration
[tool.ruff]
# Set the maximum line length to 88 (same as Black)
line-length = 88
target-version = "py310"

# Exclude specific files and directories
exclude = [
    ".bzr",
    ".direnv", 
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "__pycache__",
    "data/",  # Exclude data files (lowercase)
    "reports/", # Exclude reports
    "notebooks/", # Exclude notebooks
]

# Allow autofix for all enabled rules
fix = true

[tool.ruff.lint]
# Enable specific ruff rules
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # Pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "N",      # pep8-naming
    "SIM",    # flake8-simplify
    "RUF",    # Ruff-specific rules
]

# Ignore specific rules
ignore = [
    "E501",   # Line too long (handled by formatter)
    "B008",   # Do not perform function calls in argument defaults
    "C901",   # Too complex
    "N803",   # Argument name should be lowercase
    "N806",   # Variable in function should be lowercase
]

[tool.ruff.lint.per-file-ignores]
# Allow unused imports in __init__.py files
"__init__.py" = ["F401"]
# Allow print statements in scripts
"test_*.py" = ["T201"]
"*_test.py" = ["T201"]

[tool.ruff.lint.isort]
# Use a single line for imports
force-single-line = false
# Group local imports separately
known-local-folder = ["src"]

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"
# Indent with spaces
indent-style = "space"
# Respect magic trailing commas
skip-magic-trailing-comma = false
# Automatically detect line endings
line-ending = "auto"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
